{"version":3,"sources":["Components/Paginate.js","Components/Search.js","Components/App.js","serviceWorker.js","index.js"],"names":["Paginate","paigeCount","currentPaige","handlePageClick","previousLabel","nextLabel","breakLabel","breakClassName","pageCount","marginPagesDisplayed","pageRangeDisplayed","onPageChange","containerClassName","subContainerClassName","activeClassName","forcePage","previousLinkClassName","disabledClassName","Search","useState","data","changeData","fetching","changeFetching","count","changeCount","key","text","value","options","totalCount","length","Math","ceil","offSet","setOffSet","setcurrentPaige","sliceData","setSliceData","wait","ms","Promise","resolve","setTimeout","getData","a","fetch","response","json","console","log","message","changeHandler","e","target","getedArr","filtered","filter","item","toLowerCase","includes","slice","LoaderExampleInlineCentered","Loader","active","inline","className","List","Card","Group","map","i","header","name","meta","region","description","population","change_drop","preventDefault","x","tagName","dom_target","child","children","textContent","Input","action","Dropdown","button","basic","floating","defaultValue","onChange","icon","iconPosition","placeholder","dataPagination","selectedPagination","selected","offsetPagination","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.c35b7ba9.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactPaginate from 'react-paginate';\r\n\r\nexport function Paginate({paigeCount,currentPaige,handlePageClick}) {\r\n  return (\r\n    <ReactPaginate \r\n        previousLabel={'<'}\r\n        nextLabel={'>'}\r\n        breakLabel={'...'}\r\n        breakClassName={'break-me'}\r\n        pageCount={paigeCount}//  количество цифр пагинации\r\n        marginPagesDisplayed={2}//количество пагинаций в боте (49 и 50)\r\n        pageRangeDisplayed={2}//количество пагинаций в топе (начинается с 1 т.е при 2 покажет 1 2 3 пагинации)\r\n        onPageChange={handlePageClick}//функция которая содержит информацию data.selected - объект указывающий порядковый номер пагинации (цифра 1 = 0 и тд цифра 100 = 99)\r\n        containerClassName={'pagination'}\r\n        subContainerClassName={'pages pagination'}\r\n        activeClassName={'active'}\r\n        forcePage={currentPaige}//текущая страница по умолчанию 0\r\n        previousLinkClassName={\"previous_page\"}\r\n        disabledClassName=\"disabled\"\r\n    />\r\n  );\r\n}\r\n\r\nexport default Paginate;","import React, {useState } from 'react';\r\nimport '../App.css';\r\nimport 'semantic-ui-css/semantic.min.css'\r\nimport { Dropdown, Input, Card } from 'semantic-ui-react'\r\nimport { Loader } from 'semantic-ui-react'\r\nimport {Paginate} from './Paginate'\r\n\r\nexport function Search() {\r\n\r\n    const [data,changeData] = useState([])//данные с ссылки\r\n    const [fetching,changeFetching] = useState(false)//процесс загрузки\r\n\r\n    const [count,changeCount] = useState(10)//количество элементов на странице\r\n    const [options] = useState([//опции для downDrop Input\r\n        { key: 'ten', text: '10', value: '10'},\r\n        { key: 'twenty', text: '20', value: '20' },\r\n        { key: 'thirty', text: '50', value: '50' }\r\n    ])\r\n\r\n//////////////////////////////////////////////\r\n//Пагинация\r\n    let totalCount = data.length;//всего элементов\r\n    //let perPage = count;//элементы на 1 странице\r\n    let paigeCount = Math.ceil(totalCount / count);//количество цифр пагинации\r\n\r\n    const [offSet,setOffSet] = useState(0)//смещение для выбора элементов выбранная нами цифра на пагинации\r\n    const [currentPaige,setcurrentPaige] = useState(0)//текущая страница\r\n    const [sliceData,setSliceData] = useState([])\r\n\r\n    let handlePageClick = (dataPagination) => {\r\n      const selectedPagination = dataPagination.selected//получили инфу о порядковом номере цифры пагинации\r\n      const offsetPagination = selectedPagination*count//количество пропущенных элементов\r\n      setcurrentPaige(selectedPagination)//изменили текущую страницу / номер пагинации\r\n      setOffSet(offsetPagination)//обновили состояние количества пропущеных item из data\r\n      setSliceData(data.slice(offsetPagination,offsetPagination+count))//обновили состояние обрезанной data\r\n    }\r\n/////////////////////////////////////////////////////\r\n\r\n    const wait = (ms)=>{//функция искуственной задержки\r\n        return new Promise(resolve=>setTimeout(resolve,ms))\r\n    }\r\n\r\n    const getData = async()=>{//функция обращения по ссылке\r\n        try {\r\n            changeFetching(true)//начало загрузки\r\n            await wait(1000) \r\n            let response = await fetch('https://restcountries.eu/rest/v2/all')\r\n            response = await response.json()\r\n            changeFetching(false)//конец загрузки\r\n            return response//возвращаем массив\r\n        } catch (error) {\r\n            console.log(error.message)\r\n        }\r\n    }\r\n\r\n    const changeHandler = async(e)=>{//при ввоже текста пользователем\r\n\r\n        let text = e.target.value//текст введенный пользователем\r\n\r\n        if(!text){//если текстовое поле пустое, то обнулить состояние data\r\n            changeData([])//обнулить состояние data\r\n            setSliceData([])\r\n            return\r\n        }\r\n\r\n        let getedArr = await getData()//делаем запрос по ссылке и записываем ответ сюда\r\n        let filtered = getedArr.filter(item=>{//фильтруем массив по именам \r\n            return item['name'].toLowerCase().includes(text.toLowerCase())//фильр по совпадению по введенному тексту\r\n        })\r\n          \r\n        changeData(filtered)//обновляем состояние\r\n        setSliceData(filtered.slice(offSet,offSet+count))//режим нужныйй кусок для отображения\r\n    }\r\n\r\n    const LoaderExampleInlineCentered = () => <Loader active inline='centered' className='activete'/>\r\n\r\n    //name  region population\r\n\r\n    const List = ()=> {\r\n\r\n        if(sliceData){//если данные есть (найденно)\r\n\r\n            if(fetching){//если идет загрузка то отображать loader\r\n                return(\r\n                    <LoaderExampleInlineCentered />\r\n                )\r\n            }\r\n\r\n            return(\r\n                <Card.Group>\r\n                    {sliceData.map((item,i)=>{\r\n                        return(\r\n                            <Card \r\n                                header={item.name}\r\n                                meta={item.region}\r\n                                description={item.population}\r\n                                key={i}\r\n                            />\r\n                        )\r\n                    })}\r\n                </Card.Group>\r\n            )\r\n        }\r\n\r\n    return(//по дефолту пустой див\r\n            <div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n\r\n    //при выборе количества названий на странице\r\n    const change_drop = async(e)=>{\r\n        e.preventDefault()\r\n        let x = 0;\r\n        if(e.target.tagName === 'DIV'){\r\n            let dom_target = e.target\r\n            let child = dom_target.children[0]\r\n            let value = +child.textContent//значение в диве-спане\r\n            x=value\r\n            changeCount(value)//изменили defaultValue\r\n        }\r\n        if(e.target.tagName === 'SPAN'){\r\n            let child = e.target\r\n            let value = +child.textContent//значение в спане\r\n            x=value\r\n            changeCount(value)//изменили defaultValue\r\n        }\r\n        setSliceData(sliceData.slice(offSet,offSet+x))//поменять кол-во названий стран т.к x=value=count изменился\r\n    }\r\n\r\n  return (\r\n    <div className='Search'>\r\n      <Input\r\n          action={\r\n            <Dropdown button basic floating options={options} defaultValue={`${count}`} onChange={e=>change_drop(e)}/>//count- defaultValue которое получаем со спана\r\n          }\r\n          icon='search'\r\n          iconPosition='left'\r\n          placeholder='Search...'\r\n          onChange={changeHandler}\r\n        />\r\n      <Paginate paigeCount={paigeCount} currentPaige={currentPaige} handlePageClick={handlePageClick}/>\r\n      <List />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Search;","import React from 'react';\nimport '../App.css';\nimport {Search} from './Search'\n\nfunction App() {\n  return (\n    <div className=\"Wrapper\">\n      <Search />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}